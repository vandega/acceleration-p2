openapi: 3.0.3
info:
  title: Django DRF book giveaway API
  version: 0.0.0
paths:
  /api/book/:
    get:
      operationId: book_list
      tags:
      - book
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
          description: ''
    post:
      operationId: book_create
      tags:
      - book
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Book'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Book'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
          description: ''
  /api/book/{id}/:
    get:
      operationId: book_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - book
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
          description: ''
    put:
      operationId: book_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - book
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Book'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Book'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
          description: ''
    patch:
      operationId: book_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - book
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedBook'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedBook'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedBook'
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
          description: ''
    delete:
      operationId: book_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - book
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '204':
          description: No response body
  /api/book/author/:
    get:
      operationId: book_author_list
      tags:
      - book
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Author'
          description: ''
    post:
      operationId: book_author_create
      tags:
      - book
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Author'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Author'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Author'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'
          description: ''
  /api/book/author/{id}/:
    get:
      operationId: book_author_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - book
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'
          description: ''
    put:
      operationId: book_author_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - book
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Author'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Author'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Author'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'
          description: ''
    patch:
      operationId: book_author_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - book
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedAuthor'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedAuthor'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedAuthor'
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'
          description: ''
    delete:
      operationId: book_author_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - book
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '204':
          description: No response body
  /api/book/condition/:
    get:
      operationId: book_condition_list
      tags:
      - book
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Condition'
          description: ''
  /api/book/condition/{id}/:
    get:
      operationId: book_condition_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - book
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          description: No response body
    put:
      operationId: book_condition_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - book
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          description: No response body
    patch:
      operationId: book_condition_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - book
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          description: No response body
    delete:
      operationId: book_condition_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - book
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '204':
          description: No response body
  /api/book/condition/new/:
    post:
      operationId: book_condition_new_create
      tags:
      - book
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Condition'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Condition'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Condition'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Condition'
          description: ''
  /api/book/filter/:
    get:
      operationId: book_filter_list
      parameters:
      - in: query
        name: book_title
        schema:
          type: string
      tags:
      - book
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
          description: ''
  /api/book/genre/:
    get:
      operationId: book_genre_list
      tags:
      - book
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Genre'
          description: ''
  /api/book/genre/{id}/:
    get:
      operationId: book_genre_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - book
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Genre'
          description: ''
    put:
      operationId: book_genre_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - book
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Genre'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Genre'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Genre'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Genre'
          description: ''
    patch:
      operationId: book_genre_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - book
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedGenre'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedGenre'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedGenre'
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Genre'
          description: ''
    delete:
      operationId: book_genre_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - book
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '204':
          description: No response body
  /api/book/genre/new/:
    post:
      operationId: book_genre_new_create
      tags:
      - book
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Genre'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Genre'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Genre'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Genre'
          description: ''
  /api/giveaway/list/:
    get:
      operationId: giveaway_list_list
      description: |-
        lefts in list only books, that authenticated user can to borrow,
        (logic filters books, don't show authorised user's book(s))
      tags:
      - giveaway
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
          description: ''
  /api/user/:
    post:
      operationId: user_create
      tags:
      - user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
  /api/user/all/:
    get:
      operationId: user_all_list
      tags:
      - user
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
          description: ''
  /api/user/login/:
    post:
      operationId: user_login_create
      tags:
      - user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLogin'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserLogin'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserLogin'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserLogin'
          description: ''
  /api/user/logout/:
    get:
      operationId: user_logout_retrieve
      tags:
      - user
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          description: No response body
  /api/user/profile/:
    put:
      operationId: user_profile_update
      tags:
      - user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserEdit'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserEdit'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserEdit'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserEdit'
          description: ''
    patch:
      operationId: user_profile_partial_update
      tags:
      - user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUserEdit'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUserEdit'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUserEdit'
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserEdit'
          description: ''
components:
  schemas:
    Author:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        first_name:
          type: string
          maxLength: 50
        last_name:
          type: string
          maxLength: 50
        b_day:
          type: string
          format: date
          nullable: true
        image:
          type: string
          format: uri
          nullable: true
      required:
      - first_name
      - id
      - last_name
    Book:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        title:
          type: string
          maxLength: 100
        description:
          type: string
        pages:
          type: integer
          nullable: true
        author:
          type: array
          items:
            type: integer
        genre:
          type: array
          items:
            type: integer
        condition:
          type: array
          items:
            type: integer
        image:
          type: string
          format: uri
          nullable: true
        is_available:
          type: boolean
        owner:
          type: integer
      required:
      - author
      - condition
      - genre
      - id
      - owner
      - title
    Condition:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        condition:
          type: string
          maxLength: 50
      required:
      - condition
      - id
    Genre:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        genre:
          type: string
          maxLength: 50
      required:
      - genre
      - id
    PatchedAuthor:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        first_name:
          type: string
          maxLength: 50
        last_name:
          type: string
          maxLength: 50
        b_day:
          type: string
          format: date
          nullable: true
        image:
          type: string
          format: uri
          nullable: true
    PatchedBook:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        title:
          type: string
          maxLength: 100
        description:
          type: string
        pages:
          type: integer
          nullable: true
        author:
          type: array
          items:
            type: integer
        genre:
          type: array
          items:
            type: integer
        condition:
          type: array
          items:
            type: integer
        image:
          type: string
          format: uri
          nullable: true
        is_available:
          type: boolean
        owner:
          type: integer
    PatchedGenre:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        genre:
          type: string
          maxLength: 50
    PatchedUserEdit:
      type: object
      description: this class uses only for edit registered users information [patch]
      properties:
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
        email:
          type: string
          format: email
          maxLength: 254
        address:
          type: string
          title: Adress
          maxLength: 150
        image:
          type: string
          format: uri
          nullable: true
    User:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        email:
          type: string
          format: email
          maxLength: 254
        password:
          type: string
          writeOnly: true
          maxLength: 128
        address:
          type: string
          title: Adress
          maxLength: 150
        image:
          type: string
          format: uri
          nullable: true
      required:
      - address
      - email
      - id
      - password
      - username
    UserEdit:
      type: object
      description: this class uses only for edit registered users information [patch]
      properties:
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
        email:
          type: string
          format: email
          maxLength: 254
        address:
          type: string
          title: Adress
          maxLength: 150
        image:
          type: string
          format: uri
          nullable: true
      required:
      - address
      - email
    UserLogin:
      type: object
      description: uses for registration only
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          writeOnly: true
      required:
      - email
      - password
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
    cookieAuth:
      type: apiKey
      in: cookie
      name: sessionid
